{
  "index.html": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Seamless webform</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/buefy/dist/buefy.min.css\">\n    <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900'>\n    <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/@mdi/font@5.x/css/materialdesignicons.min.css'>\n    <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Material+Icons'>\n    <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/vuetify@2.3.20/dist/vuetify.min.css'>\n    <link rel='stylesheet' href='https://use.fontawesome.com/releases/v5.0.6/css/all.css'>\n</head>\n\n<body>\n    <div id=\"app\">\n        <v-app id=\"vuetify-app\">\n\n        </v-app>\n    </div>\n\n    <script src='https://cdn.jsdelivr.net/npm/babel-polyfill/dist/polyfill.min.js'></script>\n    <script src='https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js'></script>\n    <script src='https://cdn.jsdelivr.net/npm/vuetify@2.3.20/dist/vuetify.min.js'></script>\n    <script src=\"https://unpkg.com/buefy/dist/buefy.min.js\"></script>\n    <script type=\"text/javascript\" src=\"./seamless-client.js\"></script>\n    <script type=\"text/javascript\" src=\"./index.js\"></script>\n</body>\n</html>",
  "index.js": "app_globals = {}\n\n\n\nseamless_read_cells = {\n  \"text\": [],\n  \"json\": []\n}\nseamless_write_cells = {\n  \"text\": [],\n  \"json\": []\n}\nseamless_auto_read_cells = []\n\nctx = connect_seamless()\nctx.self.onsharelist = function (sharelist) {\n  sharelist.forEach(cell => {\n    if (ctx[cell].binary) {\n      ctx[cell].onchange = function () {\n        content_type = ctx[cell].content_type\n        if (content_type === null) content_type = \"\"\n        const v = new Blob([this.value], {type: content_type})\n        vm[cell].value = v\n        vm[cell].checksum = this.checksum\n      }\n    }\n    else if (seamless_read_cells[\"json\"].indexOf(cell) >= 0) {\n      ctx[cell].onchange = function () {\n        try {\n          const v = JSON.parse(this.value)\n          vm[cell].value = v\n          vm[cell].checksum = this.checksum\n        }\n        catch (error) {\n          console.log(`Cannot parse server value of cell '${cell}' as JSON`)\n        }\n      }\n    }\n    else if (seamless_read_cells[\"text\"].indexOf(cell) >= 0) {\n      ctx[cell].onchange = function () {\n        vm[cell].value = this.value\n        vm[cell].checksum = this.checksum\n      }\n    }\n\n    if (seamless_auto_read_cells.indexOf(cell) >= 0) {\n      ctx[cell].auto_read = true\n    }\n  })\n}\nwebctx = connect_seamless(null, null, share_namespace=\"status\")\nwebctx.self.onsharelist = function (sharelist) {\n  vis_status = webctx[\"vis_status\"]\n  if (!(vis_status === undefined)) {\n    vis_status.onchange = function() {      \n      let jstatus = JSON.parse(vis_status.value)\n      cells = {}\n      transformers = {}\n      jstatus.nodes.forEach(node => {\n        if (node.type == \"cell\") {\n          cells[node.name] = node\n        }\n        else if (node.type == \"transformer\") {\n          transformers[node.name] = node\n        }\n      })\n      jstatus.cells = cells\n      jstatus.transformers = transformers\n      vm[\"STATUS\"].value = jstatus\n      vm[\"STATUS\"].checksum = vis_status.checksum\n    }\n  }\n}  \n\nfunction seamless_update(cell, value, encoding) {\n  if (!ctx) return\n  if (!ctx.self.sharelist) return\n  if (ctx.self.sharelist.indexOf(cell) < 0) return\n  if (ctx[cell].binary) {\n    ctx[cell].set(value)\n  }\n  else if (encoding == \"json\") {\n    ctx[cell].set(JSON.stringify(value))\n  }\n  else if (encoding == \"text\") {\n    ctx[cell].set(value)\n  }\n}\n\n\nconst app = new Vue({\n  vuetify: new Vuetify(),\n  data() {\n    return {\n      ...{}, \n      ...{\n        \"STATUS\": {\n          \"checksum\": null,\n          \"value\": {}\n        }\n      }\n    }\n  },\n  methods: {\n    METHOD_get_app_globals() {\n      return app_globals\n    },\n    METHOD_file_upload(cellname, file) { \n      if (file === undefined) return\n      that = this\n      file.arrayBuffer().then(function(buf){\n        that[cellname].value = new Blob([new Uint8Array(buf)], {type: file.type })\n      })  \n    }\n    \n  },\n  watch: {\n    \n  },\n})\n\nvm = app.$mount('#app')"
}
