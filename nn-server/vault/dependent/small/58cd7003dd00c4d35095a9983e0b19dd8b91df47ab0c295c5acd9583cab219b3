"result = {}\nif package_name is not None:\n    result[\"__name__\"] = package_name\nfrom .analyze_dependencies import analyze_dependencies\ndef analyze(d, prefix):\n    for k,v in d.items():\n        if isinstance(v, dict):\n            new_prefix = prefix\n            if len(new_prefix):\n                new_prefix += \".\"\n            new_prefix += k\n            analyze(v, new_prefix)\n            continue\n        assert isinstance(k, str), k\n        if not k.endswith(\".py\"):\n            continue\n        f = k[:-3]\n        if len(prefix):\n            f = prefix + \".\" + f\n        pycode = v\n        deps0 = analyze_dependencies(pycode, package_name)\n        deps = []\n        ff = f.split(\".\")\n        for dep in deps0:\n            d = dep\n            dots = 0\n            dep2 = dep\n            if not dep.startswith(\".\"):\n                pos = len(ff)\n                if ff[-1] == \"__init__\":\n                    pos -= 1\n                ind = dep.find(\".\")\n                if ind == -1:\n                    if pos == 0:\n                        continue\n                    d = pos * \".\"\n                else:\n                    d = pos * \".\" + dep[ind+1:]\n            while d.startswith(\".\"):\n                dots += 1\n                d = d[1:]\n            if not len(d):\n                dep2 = \"\"\n                dpref = \".\".join(ff[:-dots])\n                if len(dpref):\n                    dep2 += \".\" + dpref + \".\" \n                dep2 += \"__init__\"\n            else:\n                dep2 = \".\"    \n                dpref = \".\".join(ff[:-dots])\n                if len(dpref):\n                    dep2 += dpref + \".\" \n                dep2 += d\n            deps.append(dep2)\n        deps = sorted(list(deps))\n        item = {\n            \"language\": \"python\",\n            \"code\": pycode,\n            \"dependencies\": deps,\n        }\n        result[f] = item\nanalyze(package_dirdict, \"\")"
